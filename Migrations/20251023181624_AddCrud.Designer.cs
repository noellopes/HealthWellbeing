// <auto-generated />
using System;
using HealthWellbeing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthWellbeing.Migrations
{
    [DbContext(typeof(HealthWellbeingDbContext))]
    [Migration("20251023181624_AddCrud")]
    partial class AddCrud
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthWellbeing.Models.Alergia", b =>
                {
                    b.Property<int>("AlergiaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlergiaID"));

                    b.Property<int>("AlimentoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gravidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("AlergiaID");

                    b.HasIndex("AlimentoId");

                    b.ToTable("Alergia");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Alimento", b =>
                {
                    b.Property<int>("AlimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlimentoId"));

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaAlimentoId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GorduraGPor100g")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HidratosGPor100g")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("KcalPor100g")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProteinaGPor100g")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AlimentoId");

                    b.HasIndex("CategoriaAlimentoId");

                    b.ToTable("Alimentos");
                });

            modelBuilder.Entity("HealthWellbeing.Models.AlimentoSubstituto", b =>
                {
                    b.Property<int>("AlimentoSubstitutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlimentoSubstitutoId"));

                    b.Property<int>("AlimentoOriginalId")
                        .HasColumnType("int");

                    b.Property<int>("AlimentoSubstitutoRefId")
                        .HasColumnType("int");

                    b.Property<double?>("FatorSimilaridade")
                        .HasColumnType("float");

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ProporcaoEquivalente")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AlimentoSubstitutoId");

                    b.HasIndex("AlimentoOriginalId");

                    b.HasIndex("AlimentoSubstitutoRefId");

                    b.ToTable("AlimentoSubstitutos");
                });

            modelBuilder.Entity("HealthWellbeing.Models.CategoriaAlimento", b =>
                {
                    b.Property<int>("CategoriaAlimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaAlimentoId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaAlimentoId");

                    b.ToTable("CategoriaAlimento");
                });

            modelBuilder.Entity("HealthWellbeing.Models.ComponentesDaReceita", b =>
                {
                    b.Property<int>("ComponentesDaReceitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentesDaReceitaId"));

                    b.Property<decimal>("Calorias")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<decimal>("Gorduras")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HidratosCarbono")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsOpcional")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<decimal>("Proteinas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReceitaId")
                        .HasColumnType("int");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("ComponentesDaReceitaId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("ComponentesDaReceita");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Receita", b =>
                {
                    b.Property<int>("ReceitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceitaId"));

                    b.Property<decimal>("CaloriasPorPorcao")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Gorduras")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HidratosCarbono")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsLactoseFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetariana")
                        .HasColumnType("bit");

                    b.Property<string>("ModoPreparo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Porcoes")
                        .HasColumnType("int");

                    b.Property<decimal>("Proteinas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TempoPreparo")
                        .HasColumnType("int");

                    b.HasKey("ReceitaId");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("HealthWellbeing.Models.RestricaoAlimentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Gravidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RestricaoAlimentar");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Alergia", b =>
                {
                    b.HasOne("HealthWellbeing.Models.Alimento", "Alimento")
                        .WithMany("AlergiaRelacionadas")
                        .HasForeignKey("AlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alimento");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Alimento", b =>
                {
                    b.HasOne("HealthWellbeing.Models.CategoriaAlimento", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaAlimentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("HealthWellbeing.Models.AlimentoSubstituto", b =>
                {
                    b.HasOne("HealthWellbeing.Models.Alimento", "AlimentoOriginal")
                        .WithMany("Substitutos")
                        .HasForeignKey("AlimentoOriginalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthWellbeing.Models.Alimento", "AlimentoSubstitutoRef")
                        .WithMany("SubstituidoPor")
                        .HasForeignKey("AlimentoSubstitutoRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlimentoOriginal");

                    b.Navigation("AlimentoSubstitutoRef");
                });

            modelBuilder.Entity("HealthWellbeing.Models.ComponentesDaReceita", b =>
                {
                    b.HasOne("HealthWellbeing.Models.Receita", "Receita")
                        .WithMany("Componentes")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receita");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Alimento", b =>
                {
                    b.Navigation("AlergiaRelacionadas");

                    b.Navigation("SubstituidoPor");

                    b.Navigation("Substitutos");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Receita", b =>
                {
                    b.Navigation("Componentes");
                });
#pragma warning restore 612, 618
        }
    }
}
