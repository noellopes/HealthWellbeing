// <auto-generated />
using HealthWellbeing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthWellbeing.Migrations
{
    [DbContext(typeof(HealthWellbeingDbContext))]
    [Migration("20251027151059_AddedFoodComponent")]
    partial class AddedFoodComponent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthWellbeing.Models.Alergia", b =>
                {
                    b.Property<int>("AlergiaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlergiaID"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("Gravidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("AlergiaID");

                    b.HasIndex("FoodId");

                    b.ToTable("Alergia");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<decimal>("CarbsPer100g")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("FatPer100g")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("KcalPer100g")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<decimal>("ProteinPer100g")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FoodId");

                    b.HasIndex("FoodCategoryId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("HealthWellbeing.Models.FoodCategory", b =>
                {
                    b.Property<int>("FoodCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodCategoryId"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FoodCategoryId");

                    b.ToTable("FoodCategory");
                });

            modelBuilder.Entity("HealthWellbeing.Models.FoodComponent", b =>
                {
                    b.Property<int>("FoodComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodComponentId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FoodComponentId");

                    b.ToTable("FoodComponent");
                });

            modelBuilder.Entity("HealthWellbeing.Models.FoodPortion", b =>
                {
                    b.Property<int>("FoodPortionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodPortionId"));

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("FoodPortionId");

                    b.ToTable("FoodPortion");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Objective", b =>
                {
                    b.Property<int>("ObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectiveId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("ObjectiveId");

                    b.ToTable("Objective");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Receita", b =>
                {
                    b.Property<int>("ReceitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceitaId"));

                    b.Property<decimal>("CaloriasPorPorcao")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Gorduras")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HidratosCarbono")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsLactoseFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVegetariana")
                        .HasColumnType("bit");

                    b.Property<string>("ModoPreparo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Porcoes")
                        .HasColumnType("int");

                    b.Property<decimal>("Proteinas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TempoPreparo")
                        .HasColumnType("int");

                    b.HasKey("ReceitaId");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("HealthWellbeing.Models.RestricaoAlimentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Gravidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sintomas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RestricaoAlimentar");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Alergia", b =>
                {
                    b.HasOne("HealthWellbeing.Models.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("HealthWellbeing.Models.Food", b =>
                {
                    b.HasOne("HealthWellbeing.Models.FoodCategory", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("FoodCategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HealthWellbeing.Models.FoodCategory", b =>
                {
                    b.Navigation("Foods");
                });
#pragma warning restore 612, 618
        }
    }
}
